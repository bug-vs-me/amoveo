

                                        ;(import (compiler.scm))

;(macro price_range (F maxprice)
;       (/ (* 10000 F)
                                        ;          (+ maxprice 10000)))
;nop

(define (die)
  (return 9999999 0 0))
(define (require b)
  (cond ((b ())
         (true (die)))))
;       (def helper (pdv MarketID) ;given the full oracle data provided by the blockchain, produce the integer result of that oracle. There are 4 possible outputs: 0,1,2, or 3. 0 means it is still open. 1 means true. 2 means false. 3 means it was a bad question.
;            (let (((version pd) (car@ pdv))
;                  ((MarketID2 pd) (car@ pd))
;                  (pd (car pd))
;                  ((T _) (split pd 32))
;                  ((_ Result) (split T 1))
;                  )
;              ((require (= 5 version))
;               (require (= MarketID2 MarketID))
;               (++ --AAAA Result))));switch from 1 byte binary to a integer representation.
;(define (extract signed_price_declaration Pubkey MarketID Height)
;  (let (((sig data) (split signed_price_declaration 40))
;        ((R DeclaredHeight) (split data 4))
;        ((R DeclaredPrice) (split R 2))
;        (DeclaredPrice (++ --AAA= DeclaredPrice))
;        ((MarketID2 PortionMatched) (split R 2))
;        (PortionMatched (++ --AAA= PortionMatched))
;        )
;    ((require (verify_sig sig data Pubkey))
;     (require (= MarketID MarketID2))
;     (require (not (< DeclaredHeight Height)))
;     DeclaredHeight DeclaredPrice PortionMatched
;     )))
;(define (price_range F maxprice)
;  (/ (* 10000 F)
;     (+ maxprice 10000)))
;(define (abs a)
;  (cond (((< a 0) (- 0 a))
;         (true a))))
;(define (minus_zero a b)
;  (cond (((> a b) (- a b))
;         (true 0))))
;(define (evidence Pubkey MarketID Height Expires Period MaxPrice)
;  (let ((spd ())
;        ((DeclaredHeight _ PortionMatched) (extract spd Pubkey MarketID Height)))
;    ((require (> DeclaredHeight (- height Period)))
;     (return (- Expires height);delay
;             (+ 1 (/ DeclaredHeight Period));nonce
;             (price_range (- 10000 MaxPrice) MaxPrice);amount
;             ))))
;(define (contradictory_prices )
;  (let (((spd1 spd2) ()))
;              104))
;(define (match_order )
;  (let (((spd) ()))
;    106))
;(define (unmatched )
;  (let ()
;    107))
;(define (no_publish Period)
;  (return Period (/ height Period) 0))
;(define (first mode Height Expires MaxPrice MarketID Period Pubkey)
;  (cond (((= mode 0) (no_publish Period))
;         ((= mode 1) (match_order))
;         ((= mode 2) (contradictory_prices))
;         ((= mode 3) (evidence Pubkey MarketID Height Expires Period MaxPrice))
;         ((= mode 4) (unmatched))
;         (true (die)))))
;(let (((ContractMode OracleData0 Direction Height Expires MaxPrice MarketID Period Pubkey) ())
;      (OracleData (car OracleData0))
;      )
         ;(()
            ;(() Pubkey Period MarketID MaxPrice))))))
                                        ;(helper OracleData MarketID))))))
                                        ; (first ContractMode Height Expires MaxPrice MarketID Period Pubkey)))))
;  OracleData)
                                        ;          ContractMode Pubkey ContractMode)))))
;5
;print print print print
